=begin
#Aspose.Email for Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module SwaggerClient
  class EmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get document
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [File]
    def email_get_document(name, opts = {})
      data, _status_code, _headers = email_get_document_with_http_info(name, opts)
      return data
    end

    # Get document
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def email_get_document_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_get_document ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EmailApi.email_get_document"
      end
      # resource path
      local_var_path = "/email/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email attachment
    # 
    # @param name 
    # @param attach_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [File]
    def email_get_email_attachment(name, attach_name, opts = {})
      data, _status_code, _headers = email_get_email_attachment_with_http_info(name, attach_name, opts)
      return data
    end

    # Get email attachment
    # 
    # @param name 
    # @param attach_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def email_get_email_attachment_with_http_info(name, attach_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_get_email_attachment ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EmailApi.email_get_email_attachment"
      end
      # verify the required parameter 'attach_name' is set
      if @api_client.config.client_side_validation && attach_name.nil?
        fail ArgumentError, "Missing the required parameter 'attach_name' when calling EmailApi.email_get_email_attachment"
      end
      # resource path
      local_var_path = "/email/{name}/attachments/{attachName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'attachName' + '}', attach_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_get_email_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email property
    # 
    # @param property_name 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [File]
    def email_get_email_property(property_name, name, opts = {})
      data, _status_code, _headers = email_get_email_property_with_http_info(property_name, name, opts)
      return data
    end

    # Get email property
    # 
    # @param property_name 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def email_get_email_property_with_http_info(property_name, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_get_email_property ..."
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling EmailApi.email_get_email_property"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EmailApi.email_get_email_property"
      end
      # resource path
      local_var_path = "/email/{name}/properties/{propertyName}".sub('{' + 'propertyName' + '}', property_name.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_get_email_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post add email attachment
    # 
    # @param name 
    # @param attach_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [EmailDocumentResponse]
    def email_post_add_email_attachment(name, attach_name, opts = {})
      data, _status_code, _headers = email_post_add_email_attachment_with_http_info(name, attach_name, opts)
      return data
    end

    # Post add email attachment
    # 
    # @param name 
    # @param attach_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [Array<(EmailDocumentResponse, Fixnum, Hash)>] EmailDocumentResponse data, response status code and response headers
    def email_post_add_email_attachment_with_http_info(name, attach_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_post_add_email_attachment ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EmailApi.email_post_add_email_attachment"
      end
      # verify the required parameter 'attach_name' is set
      if @api_client.config.client_side_validation && attach_name.nil?
        fail ArgumentError, "Missing the required parameter 'attach_name' when calling EmailApi.email_post_add_email_attachment"
      end
      # resource path
      local_var_path = "/email/{name}/attachments".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'attachName'] = attach_name
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailDocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_post_add_email_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put creatw new email
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailDocument] :email 
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [EmailDocumentResponse]
    def email_put_create_new_email(name, opts = {})
      data, _status_code, _headers = email_put_create_new_email_with_http_info(name, opts)
      return data
    end

    # Put creatw new email
    # 
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailDocument] :email 
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [Array<(EmailDocumentResponse, Fixnum, Hash)>] EmailDocumentResponse data, response status code and response headers
    def email_put_create_new_email_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_put_create_new_email ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EmailApi.email_put_create_new_email"
      end
      # resource path
      local_var_path = "/email/{name}".sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'email'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailDocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_put_create_new_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Put set email property
    # 
    # @param name 
    # @param property_name 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailProperty] :property 
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [EmailPropertyResponse]
    def email_put_set_email_property(name, property_name, opts = {})
      data, _status_code, _headers = email_put_set_email_property_with_http_info(name, property_name, opts)
      return data
    end

    # Put set email property
    # 
    # @param name 
    # @param property_name 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailProperty] :property 
    # @option opts [String] :storage 
    # @option opts [String] :folder 
    # @return [Array<(EmailPropertyResponse, Fixnum, Hash)>] EmailPropertyResponse data, response status code and response headers
    def email_put_set_email_property_with_http_info(name, property_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailApi.email_put_set_email_property ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EmailApi.email_put_set_email_property"
      end
      # verify the required parameter 'property_name' is set
      if @api_client.config.client_side_validation && property_name.nil?
        fail ArgumentError, "Missing the required parameter 'property_name' when calling EmailApi.email_put_set_email_property"
      end
      # resource path
      local_var_path = "/email/{name}/properties/{propertyName}".sub('{' + 'name' + '}', name.to_s).sub('{' + 'propertyName' + '}', property_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'property'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailPropertyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#email_put_set_email_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
